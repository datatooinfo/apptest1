dataord4$day <- "w"
dataord4$day <- ifelse(!weekdays(as.Date(dataord4$date)) %in% c("Saturday", "Sunday"),
"weekday","weekend")
#dataord4$day <- as.factor(dataord4$day)
#dataord4$day <- factor (c("Monday", "Tuesday", "Wednesday", "Thursday",
#"Friday", "Saturday", "Sunday"))
#levels(dataord4$day) <- c("Weekday", "Weekend")
#dataord$day[1] <- c("Monday", "Tuesday", "Wednesday", "Thursday",
#       "Friday", "Saturday", "Sunday")
#dataord$day[1] <- c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday")
#Weekday=factor(Weekday)
#table(Weekday)
#dataord4$day[2] <- c("Saturday", "Sunday")
#Weekend=factor(Weekend)
#table(Weekend)
#wkday <- subset(dataord4, day  = "Weekday", select = c(steps, interval))
#dataord4$day <- weekdays(as.Date(dataord4$date))
#dataord4 <- dataord4[order(dataord4$day, decreasing=T), ]
ggplot(dataord4,aes(interval,steps)) +geom_line() + facet_grid(.~day)
#Read data into R
data <- read.csv("c:/rWork/activity.csv", header=T,
stringsAsFactors = FALSE)
library("ggplot2", lib.loc="~/R/win-library/3.1")
#Order data by date
dataord <- data[order(data$date, decreasing=FALSE), ]
#Set X and Y axis values
a <- c(1, 10750, 21500)
b <- c("1-Oct-2012", "31-Oct-2102", "30-Nov-2012")
c <- c(0, 3.5, 7)
d <- c("0", "450", "900")
#Sum steps by day
stepsXdate <- aggregate(x=dataord$steps, by=list(dataord$date), FUN="sum")
#Order file stepsXdate by date
dataord2 <- stepsXdate[order(stepsXdate$x, decreasing=FALSE), ]
#Calculate the mean and median of the total number of steps taken per day
mn <- mean(stepsXdate$x, na.rm=T)
md <- median(stepsXdate$x, na.rm=T)
#Create a histogram of steps taken per day
hist(stepsXdate$x, main = "Total Steps By Day", xlab="Days", ylab="Steps",
xaxt="n", yaxt="n", breaks=61)
axis(1, at=a, labels=b)
axis(2, at=c, labels=d)
#Order data by interval
dataord3 <- data[order(data$interval, decreasing=FALSE), ]
plot(dataord3$interval, dataord3$steps, type="l", xlab= "Intervals",
ylab= "Average Steps", col="blue" , lwd=2, main="Average Number of Steps")
#Find and print the interval with the maximum number of steps
maxSteps <- max(dataord3$steps, na.rm=T)
maxout <- subset(dataord3, steps==maxSteps, select=c(steps, date, interval))
maxout
#Calculate and print the total number of NA's
x <- is.na(dataord3$steps); y <- which(x); z <- length(y)
aggmean <- tapply(dataord3$steps, dataord$interval, mean, na.rm=T)
taggmean <- mean(aggmean)
dataord3$steps[is.na(dataord3$steps)] <- taggmean
stepsXdateNA <- aggregate(x=dataord3$steps, by=list(dataord$date), FUN="sum")
mnNA <- mean(stepsXdateNA$x, na.rm=T)
mdNA <- median(stepsXdateNA$x, na.rm=T)
aa <- c(1, 23000, 46000)
bb <- c("1-Oct-2012", "31-Oct-2102", "30-Nov-2012")
cc <- c(0, 7.5, 15)
dd <- c("0", "23000", "46000")
hist(stepsXdateNA$x, main = "Total Steps By Day x NA's", xlab="Days", ylab="Steps",
xaxt="n", yaxt="n", breaks=61)
axis(1, at=aa, labels=bb)
axis(2, at=cc, labels=dd)
#stepsXdateNA$day <- 0
#stepsXdateNA$day <- as.factor(stepsXdateNA$day)
#levels(stepsXdateNA$day) <- c("Weekday", "Weekend")
#stepsXdateNA$day <- weekdays(as.Date(stepsXdateNA$Group.1))
#subset(stepsXdateNA, day  = "Monday"&"Tuesday" select = c(day))
#ggplot(flower,aes(Sepal.Length,Sepal.Width)) +geom_line() + facet_grid(.~Species)
dataord4 <- dataord3
dataord4$day <- "w"
dataord4$day <- ifelse(!weekdays(as.Date(dataord4$date)) %in% c("Saturday", "Sunday"),
"weekday","weekend")
#dataord4$day <- as.factor(dataord4$day)
#dataord4$day <- factor (c("Monday", "Tuesday", "Wednesday", "Thursday",
#"Friday", "Saturday", "Sunday"))
#levels(dataord4$day) <- c("Weekday", "Weekend")
#dataord$day[1] <- c("Monday", "Tuesday", "Wednesday", "Thursday",
#       "Friday", "Saturday", "Sunday")
#dataord$day[1] <- c("Monday", "Tuesday", "Wednesday", "Thursday",
#                 "Friday", "Saturday", "Sunday")
#Weekday=factor(Weekday)
#table(Weekday)
#dataord4$day[2] <- c("Saturday", "Sunday")
#Weekend=factor(Weekend)
#table(Weekend)
#wkday <- subset(dataord4, day  = "Weekday", select = c(steps, interval))
#dataord4$day <- weekdays(as.Date(dataord4$date))
#dataord4 <- dataord4[order(dataord4$day, decreasing=T), ]
ggplot(dataord4,aes(interval,steps)) +geom_line() + facet_grid(.~day)
data <- read.csv("c:/rWork/AccReg5.csv", header=T,
stringsAsFactors = FALSE, sep=",")
options(scipen=999)
fit <- lm(Tcost ~ X1, data=data)
fit
plot.new()
plot(data$X1,data$Tcost)
abline(fit, col="blue")
View(data)
View(data)
data <- read.csv("c:/rWork/AccReg5.csv", header=T,
stringsAsFactors = FALSE, sep=",")
options(scipen=999)
View(data)
data <- read.csv("c:/rWork/AccReg4.csv", header=T,
stringsAsFactors = FALSE, sep=",")
options(scipen=999)
View(data)
data <- read.csv("c:/rWork/AccReg3.csv", header=T,
stringsAsFactors = FALSE, sep=",")
options(scipen=999)
View(data)
fit <- lm(Tcost ~ Unita, data=data)
fit
plot.new()
plot(data$Units,data$Tcost)
abline(fit, col="blue")
data <- read.csv("c:/rWork/AccReg5.csv", header=T,
stringsAsFactors = FALSE, sep=",")
options(scipen=999)
fit <- lm(Tcost ~ Unit1, data=data)
fit
plot.new()
plot(data$Unit1,data$Tcost)
abline(fit, col="blue")
View(data)
data <- read.csv("c:/rWork/AccReg5.csv", header=T,
stringsAsFactors = FALSE, sep=",")
options(scipen=999)
fit <- lm(Tcost ~ Unit1, data=data)
fit
plot.new()
plot(data$Unit1,data$Tcost)
abline(fit, col="blue")
plot.new()
plot(data$Unit1,data$Tcost, xlab=Units,ylab=Cost)
abline(fit, col="blue")
plot.new()
plot(data$Unit1,data$Tcost, xlab="Units",ylab="Cost")
abline(fit, col="blue")
plot.new()
plot(data$Unit1,data$Tcost, xlab="Units",ylab="Cost", axis(2, las=2))
abline(fit, col="blue")
plot.new()
plot(data$Unit1,data$Tcost, xlab="Units",ylab="Cost", axis(2, las=1))
abline(fit, col="blue")
plot.new()
plot(data$Unit1,data$Tcost, xlab="Units",ylab="Cost")
abline(fit, col="blue")
plot.new()
plot(data$Unit1,data$Tcost, xlab="Units",ylab="Cost"axis(2, las=1))
abline(fit, col="blue")
plot.new()
plot(data$Unit1,data$Tcost, xlab="Units",ylab="Cost",axis(2, las=1))
abline(fit, col="blue")
plot.new()
plot(data$Unit1,data$Tcost, xlab="Units",ylab="Cost",axis(2, las=2))
abline(fit, col="blue")
plot.new()
plot(data$Unit1,data$Tcost, xlab="Units",ylab="Cost")
abline(fit, col="blue")
#Read data into R
data <- read.csv("c:/rWork/activity.csv", header=T,
stringsAsFactors = FALSE)
library("ggplot2", lib.loc="~/R/win-library/3.1")
#Order data by date
dataord <- data[order(data$date, decreasing=FALSE), ]
#Set X and Y axis values
a <- c(1, 10750, 21500)
b <- c("1-Oct-2012", "31-Oct-2102", "30-Nov-2012")
c <- c(0, 3.5, 7)
d <- c("0", "450", "900")
#Sum steps by day
stepsXdate <- aggregate(x=dataord$steps, by=list(dataord$date), FUN="sum")
#Order file stepsXdate by date
dataord2 <- stepsXdate[order(stepsXdate$x, decreasing=FALSE), ]
#Calculate the mean and median of the total number of steps taken per day
mn <- mean(stepsXdate$x, na.rm=T)
md <- median(stepsXdate$x, na.rm=T)
#Create a histogram of steps taken per day
hist(stepsXdate$x, main = "Total Steps By Day", xlab="Days", ylab="Steps",
xaxt="n", yaxt="n", breaks=61)
axis(1, at=a, labels=b)
axis(2, at=c, labels=d)
#Order data by interval
dataord3 <- data[order(data$interval, decreasing=FALSE), ]
plot(dataord3$interval, dataord3$steps, type="l", xlab= "Intervals",
ylab= "Average Steps", col="blue" , lwd=2, main="Average Number of Steps")
#Find and print the interval with the maximum number of steps
maxSteps <- max(dataord3$steps, na.rm=T)
maxout <- subset(dataord3, steps==maxSteps, select=c(steps, date, interval))
maxout
#Calculate and print the total number of NA's
x <- is.na(dataord3$steps); y <- which(x); z <- length(y)
aggmean <- tapply(dataord3$steps, dataord$interval, mean, na.rm=T)
taggmean <- mean(aggmean)
dataord3$steps[is.na(dataord3$steps)] <- taggmean
stepsXdateNA <- aggregate(x=dataord3$steps, by=list(dataord$date), FUN="sum")
mnNA <- mean(stepsXdateNA$x, na.rm=T)
mdNA <- median(stepsXdateNA$x, na.rm=T)
aa <- c(1, 23000, 46000)
bb <- c("1-Oct-2012", "31-Oct-2102", "30-Nov-2012")
cc <- c(0, 7.5, 15)
dd <- c("0", "23000", "46000")
hist(stepsXdateNA$x, main = "Total Steps By Day x NA's", xlab="Days", ylab="Steps",
xaxt="n", yaxt="n", breaks=61)
axis(1, at=aa, labels=bb)
axis(2, at=cc, labels=dd)
#stepsXdateNA$day <- 0
#stepsXdateNA$day <- as.factor(stepsXdateNA$day)
#levels(stepsXdateNA$day) <- c("Weekday", "Weekend")
#stepsXdateNA$day <- weekdays(as.Date(stepsXdateNA$Group.1))
#subset(stepsXdateNA, day  = "Monday"&"Tuesday" select = c(day))
#ggplot(flower,aes(Sepal.Length,Sepal.Width)) +geom_line() + facet_grid(.~Species)
dataord4 <- dataord3
dataord4$day <- "w"
dataord4$day <- ifelse(!weekdays(as.Date(dataord4$date)) %in% c("Saturday", "Sunday"),
"weekday","weekend")
#dataord4$day <- as.factor(dataord4$day)
#dataord4$day <- factor (c("Monday", "Tuesday", "Wednesday", "Thursday",
#"Friday", "Saturday", "Sunday"))
#levels(dataord4$day) <- c("Weekday", "Weekend")
#dataord$day[1] <- c("Monday", "Tuesday", "Wednesday", "Thursday",
#       "Friday", "Saturday", "Sunday")
#dataord$day[1] <- c("Monday", "Tuesday", "Wednesday", "Thursday",
#                 "Friday", "Saturday", "Sunday")
#Weekday=factor(Weekday)
#table(Weekday)
#dataord4$day[2] <- c("Saturday", "Sunday")
#Weekend=factor(Weekend)
#table(Weekend)
#wkday <- subset(dataord4, day  = "Weekday", select = c(steps, interval))
#dataord4$day <- weekdays(as.Date(dataord4$date))
#dataord4 <- dataord4[order(dataord4$day, decreasing=T), ]
ggplot(dataord4,aes(interval,steps)) +geom_line() + facet_grid(.~day)
data <- read.csv("c:/rWork/AccReg5.csv", header=T,
stringsAsFactors = FALSE, sep=",")
options(scipen=999)
fit <- lm(Tcost ~ Unit1, data=data)
fit
plot.new()
plot(data$Unit1,data$Tcost, xlab="Units",ylab="Cost")
abline(fit, col="blue")
data <- read.csv("c:/rWork/AccReg5.csv", header=T,
stringsAsFactors = FALSE, sep=",")
options(scipen=999)
fit <- lm(Tcost ~ Unit1, data=data)
fit
plot.new()
plot(data$Unit1,data$Tcost, xlab="Units",ylab="Cost")
abline(fit, col="blue")
View(data)
data <- read.csv("c:/rWork/AccReg5.csv", header=T,
stringsAsFactors = FALSE, sep=",")
options(scipen=999)
data <- read.csv("c:/rWork/AccReg5.csv", header=T,
stringsAsFactors = FALSE, sep=",")
options(scipen=999)
View(data)
fit <- lm(Tcost ~ Unit1, data=data)
fit
plot.new()
plot(data$Unit1,data$Tcost, xlab="Units",ylab="Cost")
abline(fit, col="blue")
#Read data into R
data <- read.csv("c:/rWork/activity.csv", header=T,
stringsAsFactors = FALSE)
library("ggplot2", lib.loc="~/R/win-library/3.1")
#Order data by date
dataord <- data[order(data$date, decreasing=FALSE), ]
#Set X and Y axis values
a <- c(1, 10750, 21500)
b <- c("1-Oct-2012", "31-Oct-2102", "30-Nov-2012")
c <- c(0, 3.5, 7)
d <- c("0", "450", "900")
#Sum steps by day
stepsXdate <- aggregate(x=dataord$steps, by=list(dataord$date), FUN="sum")
#Order file stepsXdate by date
dataord2 <- stepsXdate[order(stepsXdate$x, decreasing=FALSE), ]
#Calculate the mean and median of the total number of steps taken per day
mn <- mean(stepsXdate$x, na.rm=T)
md <- median(stepsXdate$x, na.rm=T)
#Create a histogram of steps taken per day
hist(stepsXdate$x, main = "Total Steps By Day", xlab="Days", ylab="Steps",
xaxt="n", yaxt="n", breaks=61)
axis(1, at=a, labels=b)
axis(2, at=c, labels=d)
#Order data by interval
dataord3 <- data[order(data$interval, decreasing=FALSE), ]
plot(dataord3$interval, dataord3$steps, type="l", xlab= "Intervals",
ylab= "Average Steps", col="blue" , lwd=2, main="Average Number of Steps")
#Find and print the interval with the maximum number of steps
maxSteps <- max(dataord3$steps, na.rm=T)
maxout <- subset(dataord3, steps==maxSteps, select=c(steps, date, interval))
maxout
#Calculate and print the total number of NA's
x <- is.na(dataord3$steps); y <- which(x); z <- length(y)
aggmean <- tapply(dataord3$steps, dataord$interval, mean, na.rm=T)
taggmean <- mean(aggmean)
dataord3$steps[is.na(dataord3$steps)] <- taggmean
stepsXdateNA <- aggregate(x=dataord3$steps, by=list(dataord$date), FUN="sum")
mnNA <- mean(stepsXdateNA$x, na.rm=T)
mdNA <- median(stepsXdateNA$x, na.rm=T)
aa <- c(1, 23000, 46000)
bb <- c("1-Oct-2012", "31-Oct-2102", "30-Nov-2012")
cc <- c(0, 7.5, 15)
dd <- c("0", "23000", "46000")
hist(stepsXdateNA$x, main = "Total Steps By Day x NA's", xlab="Days", ylab="Steps",
xaxt="n", yaxt="n", breaks=61)
axis(1, at=aa, labels=bb)
axis(2, at=cc, labels=dd)
#stepsXdateNA$day <- 0
#stepsXdateNA$day <- as.factor(stepsXdateNA$day)
#levels(stepsXdateNA$day) <- c("Weekday", "Weekend")
#stepsXdateNA$day <- weekdays(as.Date(stepsXdateNA$Group.1))
#subset(stepsXdateNA, day  = "Monday"&"Tuesday" select = c(day))
#ggplot(flower,aes(Sepal.Length,Sepal.Width)) +geom_line() + facet_grid(.~Species)
dataord4 <- dataord3
dataord4$day <- "w"
dataord4$day <- ifelse(!weekdays(as.Date(dataord4$date)) %in% c("Saturday", "Sunday"),
"weekday","weekend")
#dataord4$day <- as.factor(dataord4$day)
#dataord4$day <- factor (c("Monday", "Tuesday", "Wednesday", "Thursday",
#"Friday", "Saturday", "Sunday"))
#levels(dataord4$day) <- c("Weekday", "Weekend")
#dataord$day[1] <- c("Monday", "Tuesday", "Wednesday", "Thursday",
#       "Friday", "Saturday", "Sunday")
#dataord$day[1] <- c("Monday", "Tuesday", "Wednesday", "Thursday",
#                 "Friday", "Saturday", "Sunday")
#Weekday=factor(Weekday)
#table(Weekday)
#dataord4$day[2] <- c("Saturday", "Sunday")
#Weekend=factor(Weekend)
#table(Weekend)
#wkday <- subset(dataord4, day  = "Weekday", select = c(steps, interval))
#dataord4$day <- weekdays(as.Date(dataord4$date))
#dataord4 <- dataord4[order(dataord4$day, decreasing=T), ]
ggplot(dataord4,aes(interval,steps)) +geom_line() + facet_grid(.~day)
cat <- 4
cat + 1
dog + 1
make_list <- function() {
list(date = Sys.Date(),
time = Sys.time(),
timezone = Sys.timezone())
}
make_list$time
make_list
time
make_list()
make_list()$time
lst <- list(numbers = 1:10, letters = letters, boolean = c(TRUE, FALSE))
lst
lst$numbers
lst[1]
lst[[1]]
data <- read.csv("c:/rWork/AccReg5.csv", header=T,
stringsAsFactors = FALSE, sep=",")
options(scipen=999)
fit <- lm(Tcost ~ Unit1, data=data)
fit
plot.new()
plot(data$Unit1,data$Tcost, xlab="Units",ylab="Cost")
abline(fit, col="blue")
View(data)
summary fit
summary(fit)
View(data)
2+2
4*3
12-6
6/3
1:6
dir <- 1:6
die <- 1:6
die*die
die%*%die
die%o%die
factorial(die)
sample(x = 1:4, size = 2)
sample(x = 1:4, size = 2)
sample(x = 1:4, size = 2)
sample(x = 1:4, size = 2)
sample(x = 1:4, size = 2)
sample(x = 1:6, size = 1)
sample(x = 1:6, size = 1)
sample(x = 1:6, size = 1)
sample(x = 1:6, size = 1)
arge(summary)
args(summary)
args(sum)
args(round)
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4
y <- 2:3
x+y
x <- matrix(1:10)
x
dim(x,2)
dim(x)
m <- matrix(1:6, nrow = 2, ncol = 3)
m
x <- matrix(1:10, nrow = 2, ncol = 3)
x
x <- matrix(1:9, nrow = 2, ncol = 3)
x
x <- matrix(1:9, nrow = 3, ncol = 2)
x
x <- matrix(1:9, nrow = 3, ncol = 3)
x
x <- matrix(1:18, nrow = 3, ncol = 3)
x
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
x <- c(3, 5, 1, 10, 12, 6)
x[x == 6] <- 0
x
x <- c(3, 5, 1, 10, 12, 6)
x[x > 0] <- 6
x
x <- c(3, 5, 1, 10, 12, 6)
x[x %in% 1:5] <- 0
x
x <- c(3, 5, 1, 10, 12, 6)
x[x == 0] < 6
x
data <- read.csv("c:/rWork/hw1_data.csv", header=T,
stringsAsFactors = FALSE, sep=",")
options(scipen=999)
tail(data)
head(data,47)
is.na(data$Ozone)
n <- is.na(data$Ozone)
summary (n)
mean(data$Ozone, rm.na=T)
mean(data$Ozone, na.rm=T)
?subset
s <- subset(data, Ozone > 31 & Temp > 90, select = c(Ozone, Temp)
)
s
s <- subset(data, Ozone > 31 & Temp > 90, select = c(Ozone, Temp, Solar.R))
s
mean(s$Solar.R, na.rm=T)
m <- subset(data, Month==6)
m
mean(m$Temp, na.rm=T)
m <- subset(data, Month==5)
summary(m)
data[47]
data[,47]
data[47,]
x <- c(4, TRUE)
class(x)
x <- 4L
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[2]]
head(data,2)
dim(data)
tail(data,2)
View(data)
is.na(data)
summary(data)
data
s <- is.na(data)
summary(s)
is.na(s) <-
""
s
summary(s)
is.na(data)
n <- is.na(data)
summary(n)
n
summary(n)
summary(data)
m
shiny::runApp('App-1')
counties <- readRDS("census-app/data/counties.rds")
View(counties)
INSTALL.packages(c("maps", "mapproj"))
install.packages(c("maps", "mapproj"))
library("mapproj", lib.loc="~/R/win-library/3.1")
detach("package:maps", unload=TRUE)
library("maptools", lib.loc="~/R/win-library/3.1")
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
install.packages("percent_map")
R.version
library("mapproj", lib.loc="~/R/win-library/3.1")
detach("package:maps", unload=TRUE)
detach("package:mapproj", unload=TRUE)
library("maps", lib.loc="~/R/win-library/3.1")
library("mapproj", lib.loc="~/R/win-library/3.1")
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
View(counties)
shiny::runApp('census-app')
shiny::runApp('census-app')
shiny::runApp('census-app')
shiny::runApp('census-app')
